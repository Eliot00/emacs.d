#+TITLE: Emacs配置文件

#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

在Emacs剛啓動，還未加載主要配置文件時的配置文件。

#+BEGIN_SRC emacs-lisp
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

;; 設置垃圾回收參數
(setq gc-cons-threshold most-positive-fixnum)

;; 禁止自動縮放窗口
(setq frame-inhibit-implied-resize t)

;; 禁用菜單欄、工具欄、滾動條
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; 沉浸式titlebar
(when (featurep 'ns)
  (push '(ns-transparent-titlebar . t) default-frame-alist))

;; macOS按鍵配置
(setq mac-command-modifier 'meta)

;; 啓用 `quickstart'
(setq package-quickstart t)

;; Prevent flash of unstyled mode line
(setq mode-line-format nil)

(provide 'early-init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

主配置文件

** init.el 文件頭
#+BEGIN_SRC emacs-lisp
;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** 性能相關
參考[[https://zenn.dev/zk_phi/books/cba129aacd4c1418ade4/viewer/dcebc13578d42055f8a4][Emacs の起動時間を""詰める""]]

#+BEGIN_SRC emacs-lisp
;; 設置垃圾回收參數
(setq gc-cons-threshold most-positive-fixnum)

;; 禁用Magic File Name
(defconst my-saved-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
#+END_SRC

** [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp
;; 部分包需要從melpa下載
(eval-when-compile
  (require 'package))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; 初始化 `use-package'
(setq use-package-expand-minimally t
      use-package-enable-imenu-support t)
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+end_src

** 加載模塊化配置

#+BEGIN_SRC emacs-lisp
;; 將lisp目錄放到加載路徑前以加快啓動速度
(let ((dir (locate-user-emacs-file "lisp")))
  (add-to-list 'load-path (file-name-as-directory dir)))

;; 加載各模塊配置
;; 不要在`*message*'緩衝區顯示加載模塊化配置的信息
(with-temp-message ""
  (require 'init-base)
  (require 'init-ui)
  (require 'init-edit)
  (require 'init-org)
  (require 'init-completion)
  (require 'init-dev)
  (require 'init-llm))
#+END_SRC

** 性能相關 - 重置

#+BEGIN_SRC emacs-lisp
;; 重置Magic File Name
(setq file-name-handler-alist my-saved-file-name-handler-alist)

;; 重置GC設置 16M
(setq gc-cons-threshold 16777216)
#+END_SRC

** init.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC

* init-base.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-base.el :mkdirp yes
:END:

** init-base.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-base.el --- Basical settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** 簡化確認操作

#+BEGIN_SRC emacs-lisp
(setq use-short-answers t)
#+END_SRC

** 編碼設置
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
;; `set-language-environment' 會自動設置 `default-input-method' 沒這個必要
(setq default-input-method nil)
(setq selection-coding-system 'utf-8)
#+END_SRC

** init-base.el 文件尾

#+BEGIN_SRC emacs-lisp

(provide 'init-base)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-base.el ends here
#+END_SRC

* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:

** init-ui.el 文件頭
#+BEGIN_SRC emacs-lisp
;;; init-ui.el --- UI settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** 字體
#+BEGIN_SRC emacs-lisp
(let ((iosevka (font-spec :family "Iosevka Nerd Font"))
      (lxgw    (font-spec :family "LXGW WenKai Mono TC")))
  (set-fontset-font t 'unicode iosevka)
  (set-fontset-font t 'han lxgw)
  (set-fontset-font t 'cjk-misc lxgw)
  (set-face-attribute 'default nil :font "fontset-default" :height 200))
(set-face-attribute 'fixed-pitch nil :inherit 'default)
#+END_SRC

*** Ligature

#+BEGIN_SRC emacs-lisp
(use-package composite
  :ensure nil
  :init (defvar composition-ligature-table (make-char-table nil))
  :hook (((prog-mode
           conf-mode nxml-mode markdown-mode help-mode
           shell-mode eshell-mode term-mode vterm-mode)
          . (lambda () (setq-local composition-function-table composition-ligature-table))))
  :config
  ;; support ligatures, some toned down to prevent hang
  (let ((alist
         '((33  . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
           (35  . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
           (36  . ".\\(?:\\(>\\)>?\\)")
           (37  . ".\\(?:\\(%\\)%?\\)")
           (38  . ".\\(?:\\(&\\)&?\\)")
           (42  . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
           (43  . ".\\(?:\\([>]\\)>?\\)")
           (45  . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
           (46  . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
           (47  . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
           (48  . ".\\(?:x[a-zA-Z]\\)")
           (58  . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
           (59  . ".\\(?:\\(;\\);?\\)")
           (60  . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
           (61  . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
           (62  . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
           (63  . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
           (91  . ".\\(?:\\(|\\)[]|]?\\)")
           (94  . ".\\(?:\\(=\\)=?\\)")
           (95  . ".\\(?:\\(|_\\|[_]\\)_?\\)")
           (119 . ".\\(?:\\(ww\\)w?\\)")
           (123 . ".\\(?:\\(|\\)[|}]?\\)")
           (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
           (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-ligature-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
  (set-char-table-parent composition-ligature-table composition-function-table))
#+END_SRC

** 主題
#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :ensure t
  :custom
  (modus-themes-bold-constructs t)
  (modus-themes-italic-constructs t)
  (modus-themes-headings
  '((0 . (1.75))
    (1 . (1.2))
    (2 . (1.15))
    (3 . (1.1))
    (t . t)))
  :config
  (modus-themes-load-theme 'modus-operandi-tinted))
#+END_SRC

** 零散設置
#+BEGIN_SRC emacs-lisp
;; 禁用一行GUI特性
(setq use-dialog-box nil)
(setq inhibit-default-init t)
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq inhibit-startup-buffer-menu t)

;; 設置自動折行寬度爲80字符
(setq-default fill-column 80)

;; 以16進制顯示字節數
(setq display-raw-bytes-as-hex t)

;; 有輸入時禁止 `fontification' 相關鉤子，使滾動更順滑
(setq redisplay-skip-fontification-on-input t)

;; 在光標處而非鼠標所在位置粘貼
(setq mouse-yank-at-point t)

;; 禁止自動垂直滾動
(setq auto-window-vscroll nil)

;; 空格代替Tab
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Icon
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons
  :ensure t
  :defer t
  :custom
  (nerd-icons-font-family "Iosevka Nerd Font"))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :custom
  (column-number-mode t)
  (doom-modeline-irc nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-gnus nil)
  (doom-modeline-github nil))
#+END_SRC

** 縮進提示
#+BEGIN_SRC emacs-lisp
(use-package indent-bars
  :ensure t
  :custom
  (indent-bars-treesit-support t)
  :hook ((typescript-ts-mode rust-mode) . indent-bars-mode))
#+END_SRC

** 啓動畫面

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :vc (:url "https://github.com/emacs-dashboard/emacs-dashboard.git"
       :rev :newest)
  :init
  (setq dashboard-startup-banner (expand-file-name
                                   "logo.svg"
                                    user-emacs-directory)
        dashboard-display-icons-p t
        dashboard-icon-type 'nerd-icons
        dashboard-set-file-icons t
        dashboard-path-style 'truncate-middle
        dashboard-path-max-length 60
        dashboard-projects-backend 'project-el
        dashboard-center-content t
        dashboard-vertically-center-content t
        dashboard-items '((recents   . 10)
                          (bookmarks . 5)
                          (projects  . 5)))
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** init-ui.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+END_SRC

* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:

** init-edit.el 文件頭

#+BEGIN_SRC emacs-lisp
;;; init-edit.el --- Editing settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** Emacs備份保存設置

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; 禁用自動備份
(setq auto-save-default nil) ; 禁用自動保存
(setq delete-by-moving-to-trash t) ; 移動到廢紙簍替代直接刪除
#+END_SRC

** 自動重載
其它應用修改文件後，Emacs自動重載文件

#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode))
#+END_SRC

** 模態編輯

#+BEGIN_SRC emacs-lisp
;; 首先定義鍵位
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(use-package meow
  :ensure t
  :config
  (meow-setup)
  (meow-global-mode 1))
#+END_SRC

** init-edit.el 文件尾

#+BEGIN_SRC emacs-lisp

(provide 'init-edit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-edit.el ends here
#+END_SRC

* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:

** init-org.el 文件頭

#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** 常量

#+BEGIN_SRC emacs-lisp
(defconst elliot/org-notes-dir (eval-when-compile (expand-file-name "~/Documents/Notes/")))
#+END_SRC

** Org mode基本配置

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :custom
  (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
  (org-ellipsis "…")
  (org-fontify-whole-heading-line t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-enforce-todo-dependencies t)
  (org-enforce-todo-checkbox-dependencies t)
  (org-closed-keep-when-no-todo t)
  (org-log-done 'time)
  (org-log-repeat 'time)
  (org-log-redeadline 'note)
  (org-log-reschedule 'note)
  (org-log-into-drawer t)
  (org-todo-keywords '((sequence "TODO(t)" "DOING(i!)" "PENDING(p!)" "|" "DONE(d!)" "CANCELLED(c@/!)")))
  (org-return-follows-link t))
#+END_SRC

| 表格測試 | Test |
|----------+------|
| OK       | Yes  |

** 外觀美化

#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :ensure t
  :hook ((org-mode . org-modern-mode)
         (org-agenda-finalize . org-modern-agenda))
  :config
  (setq-default line-spacing 0.1))
#+END_SRC

** 自動展開

#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :ensure t
  :hook
  (org-mode . org-appear-mode)
  :custom
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  (org-appear-inside-latex t))
#+END_SRC

** 模板

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :commands org-capture)
#+END_SRC

** 雙鏈筆記

#+BEGIN_SRC emacs-lisp
(use-package denote
  :ensure t
  :defer t
  :hook (dired-mode . denote-dired-mode-in-directories)
  :init
  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers nil)
    (add-to-list 'org-capture-templates
                 '("j" "Journal (with Denote)" plain
                    (file denote-last-path)
                    (function
                    (lambda ()
                        (let* ((denote-use-keywords '("journal"))
                               (denote-use-title (format-time-string "%Y-%m-%d"))
                               (denote-use-directory (expand-file-name "journals" (denote-directory))))
                        (denote-org-capture))))
                    :no-save t
                    :immediate-finish nil
                    :kill-buffer t
                    :jump-to-captured t)))
  :config
  (setq denote-directory elliot/org-notes-dir))
#+END_SRC

** 日程

#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :ensure nil
  :defer t
  :custom
  (org-agenda-files
    (append
      (directory-files (expand-file-name "habits/" elliot/org-notes-dir) t "\\.org$")
      (directory-files (expand-file-name "projects/" elliot/org-notes-dir) t "\\.org$"))))
#+END_SRC

** init-org.el 文件尾

#+BEGIN_SRC emacs-lisp

(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC

* init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:

補全設置

** init-completion.el 文件頭
#+BEGIN_SRC emacs-lisp
;;; init-completion.el --- Completion settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :custom
  (vertico-count 15)
  (vertico-cycle t)
  :init (vertico-mode))
#+END_SRC

** 無序補全
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))
  (completion-pcm-leading-wildcard t))
#+END_SRC

** corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  :ensure t
  :hook ((after-init . global-corfu-mode)
         (prog-mode . corfu-popupinfo-mode))
  :config
  (setq tab-always-indent 'complete)
  (setq text-mode-ispell-word-completion nil)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("S-SPC" . corfu-insert-separator))
  :custom
  (corfu-auto t)
  (corfu-cycle t))
#+END_SRC

** cape
補全後端配置
#+BEGIN_SRC emacs-lisp
(use-package cape
  :ensure t
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+END_SRC

** savehist

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:
  (setq enable-recursive-minibuffers t)
  (setq history-length 1000)
  (setq savehist-additional-variables '(mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        extended-command-history))
  (setq savehist-autosave-interval 300))
#+END_SRC

** marginalia

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode))
#+END_SRC

** init-completion.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-completion)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-completion.el ends here
#+END_SRC

* init-dev.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-dev.el :mkdirp yes
:END:

** init-dev.el 文件頭
#+BEGIN_SRC emacs-lisp
;;; init-dev.el --- Development settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** 雜項

#+BEGIN_SRC emacs-lisp
(use-package elliot-❤️-hack
  :ensure nil
  :no-require t
  :hook ((prog-mode . hs-minor-mode)
         (prog-mode . display-line-numbers-mode)
         (prog-mode . electric-pair-mode))
  :init
  (defconst elliot/custom-path "/run/current-system/sw/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin")
  (setenv "PATH" elliot/custom-path)
  (setq exec-path (append (parse-colon-path elliot/custom-path) (list exec-directory)))
  :custom
  (display-line-numbers-width-start t)
  (display-line-number-grow-only t)
  (eshell-path-env elliot/custom-path))
#+END_SRC

** Version Control
*** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t)
#+END_SRC

*** 側邊欄顯示改動狀態
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (global-diff-hl-mode t))
#+END_SRC

** treesit

#+BEGIN_SRC emacs-lisp
(use-package treesit
  :ensure nil
  :mode (("\\.tsx\\'" . tsx-ts-mode)
         ("\\.ts\\'"  . typescript-ts-mode))
  :init
  (setq treesit-font-lock-level 4
        treesit-language-source-alist
          '((astro      "https://github.com/virchau13/tree-sitter-astro")
            (css        "https://github.com/tree-sitter/tree-sitter-css")
            (html       "https://github.com/tree-sitter/tree-sitter-html")
            (haskell    "https://github.com/tree-sitter/tree-sitter-haskell")
            (json       "https://github.com/tree-sitter/tree-sitter-json")
            (rust       "https://github.com/tree-sitter/tree-sitter-rust" "v0.23.2") ; for ABI compability
            (toml       "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))))
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure nil
  :defer t
  :bind (:map flymake-mode-map
         ("M-n" . flymake-goto-next-error)
         ("M-p" . flymake-goto-prev-error))
  :custom
  (eglot-code-action-indications '(eldoc-hint)))
#+END_SRC

** 语言
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :mode "\\.rs\\'"
  :init
  (setq rust-mode-treesitter-derive t))
#+END_SRC

*** Scheme
#+BEGIN_SRC emacs-lisp
(use-package geiser-guile
  :ensure t
  :defer t
  :config
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((scheme . t))))
#+END_SRC

** init-dev.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-dev)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dev.el ends here
#+END_SRC

* init-llm.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-llm.el :mkdirp yes
:END:

** init-llm.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-llm.el --- LLM settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** gptel

#+BEGIN_SRC emacs-lisp
(use-package gptel
  :ensure t
  :defer t
  :config
  (gptel-make-deepseek
    "DeepSeek"
    :stream t
    :key gptel-api-key))
#+END_SRC

** init-llm.el 文件尾

#+BEGIN_SRC emacs-lisp

(provide 'init-llm)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-llm.el ends here
#+END_SRC
